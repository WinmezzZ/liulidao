
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client"
  previewFeatures = ["fullTextSearchPostgres", "driverAdapters"]
  output          = "./generated/prisma"
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "./generated/zod"
  useMultipleFiles                 = true
  createRelationValuesTypes        = true
  createInputTypes                 = true
  createPartialTypes               = true
  createOptionalDefaultValuesTypes = true
  writeNullishInModelTypes         = true
}

enum Theme {
  light @map("light")
  dark @map("dark")
  system @map("system")
}

model User {
  id               String              @id
  name             String
  email            String
  emailVerified    Boolean             @default(false)
  image            String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  twoFactorEnabled Boolean?
  role             String?
  bio              String?
  location         String?
  banned           Boolean?
  banReason        String?
  banExpires       DateTime?
  nickname         String?
  font             String?
  theme            Theme?              @default(system)
  sessions         Session[]
  accounts         Account[]
  members          Member[]
  invitations      Invitation[]
  twofactors       TwoFactor[]
  articles         Article[]
  createdSpaces    Space[]             @relation("CreatedSpaces")
  ownedSpaces      Space[]             @relation("OwnedSpaces")
  articleActions   ArticleUserAction[]
  articleVersions  ArticleVersion[]

  passkeys Passkey[]

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeSpaceId  String?
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id String @id

  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

model Space {
  id          String       @id @default(uuid())
  name        String
  description String?
  slug        String?
  logo        String?
  createdAt   DateTime     @default(now())
  metadata    String?
  Article     Article[]
  createdById String
  createdBy   User         @relation("CreatedSpaces", fields: [createdById], references: [id], onDelete: Cascade)
  ownerId     String
  owner       User         @relation("OwnedSpaces", fields: [ownerId], references: [id], onDelete: Cascade)

  members     Member[]
  invitations Invitation[]

  @@unique([slug])
  @@map("space")
}

model Member {
  id        String   @id
  spaceId   String
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("member")
}

model Invitation {
  id        String   @id
  spaceId   String
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  email     String
  role      String?
  status    String
  expiresAt DateTime
  inviterId String
  user      User     @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model TwoFactor {
  id          String @id
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

model Article {
  id              String           @id @default(nanoid())
  title           String?
  content         Json? /// @zod.custom.use(z.any().optional())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  authorId        String
  author          User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  spaceId         String
  space           Space            @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  articleVersions ArticleVersion[]

  parentId String?
  parent   Article?  @relation("ParentChild", fields: [parentId], references: [id])
  children Article[] @relation("ParentChild")

  coverImage     String?
  icon           String?
  status         ArticleStatusType     @default(DRAFT)
  type           ArticleType
  permissionType ArticlePermissionType @default(ALL_CAN_VIEW_AND_EDIT)
  userActions    ArticleUserAction[]

  @@map("article")
}

model ArticleVersion {
  id        String  @id @default(nanoid())
  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  authorId  String
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)

  title   String?
  content Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("article-version")
}

enum ArticleStatusType {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ArticleType {
  HOME
  PAGE
  BLOG
}

enum ArticlePermissionType {
  ALL_CAN_VIEW_AND_EDIT

  ALL_CAN_VIEW_SOME_CAN_EDIT

  SOME_CAN_VIEW_AND_EDIT
}

enum ArticleAction {
  MANAGE
  VIEW
  EDIT
}

model ArticleUserAction {
  id        String        @id @default(nanoid())
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  articleId String
  article   Article       @relation(fields: [articleId], references: [id], onDelete: Cascade)
  action    ArticleAction

  createdAt DateTime @default(now())

  // 每个用户对每篇文章只有一个权限
  @@unique([userId, articleId])
  @@map("article_user_action")
}

model Passkey {
  id           String    @id
  name         String?
  publicKey    String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime?
  aaguid       String?

  @@map("passkey")
}
