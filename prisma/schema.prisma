datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
  useMultipleFiles                 = true
}

model User {
  id               String       @id
  name             String
  email            String
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  twoFactorEnabled Boolean?
  role             String?
  banned           Boolean?
  banReason        String?
  banExpires       DateTime?
  username         String?
  displayUsername  String?
  sessions         Session[]
  accounts         Account[]
  members          Member[]
  invitations      Invitation[]
  twofactors       TwoFactor[]
  articles         Article[]
  createdSpaces    Space[] @relation("CreatedSpaces")
  ownedSpaces      Space[] @relation("OwnedSpaces")

  @@unique([username])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeSpaceId  String?
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id String @id

  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Space {
  id          String       @id @default(cuid())
  name        String
  description String?
  slug        String?
  logo        String?
  createdAt   DateTime     @default(now())
  metadata    String?
  Member      Member[]
  Invitation  Invitation[]  
  Article     Article[]
  createdById String
  createdBy   User   @relation("CreatedSpaces", fields: [createdById], references: [id], onDelete: Cascade)
  ownerId     String
  owner       User   @relation("OwnedSpaces", fields: [ownerId], references: [id], onDelete: Cascade)

  @@unique([slug])
  @@map("space")
}

model Member {
  id        String   @id
  spaceId   String
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      String
  createdAt DateTime

  @@map("member")
}

model Invitation {
  id        String   @id
  spaceId   String
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  email     String
  role      String?
  status    String
  expiresAt DateTime
  inviterId String
  user      User     @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model TwoFactor {
  id          String @id
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

model Article {
  id        String   @id @default(cuid())
  title     String
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  spaceId   String
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@map("article")
}
